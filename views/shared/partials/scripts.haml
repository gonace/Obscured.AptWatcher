%script{:src => '/script/constants/exception.js'}
%script{:src => '/script/constants/level.js'}
%script{:src => '/script/constants/guid.js'}
%script{:src => '/script/core/obscured.core.js'}
%script{:src => '/script/core/obscured.storage.js'}
%script{:src => '/script/core/obscured.template.js'}
%script{:src => '/script/core/obscured.debugger.js'}
%script{:src => '/script/core/obscured.event.js'}
%script{:src => '/script/core/obscured.error.js'}
%script{:src => '/script/core/obscured.ajax.js'}
%script{:src => '/script/core/obscured.loader.js'}
%script{:src => '/script/core/obscured.password.js'}
%script{:src => '/script/core/obscured.pagination.js'}
%script{:src => '/script/helpers/obscured.action.js'}
%script{:src => '/script/helpers/obscured.enabler.js'}


%script{:src => '/script/toolkit/toolkit.min.js'}
%script{:src => '/script/toolkit/application.js'}
%script{:src => '/script/password/strength.js'}
%script{:src => '/script/password/jquery.js'}


:javascript
  Handlebars.registerHelper('list', function(items, options) {
    var out = "<ul>";

    for(var i=0, l=items.length; i<l; i++) {
      out = out + "<li>" + options.fn(items[i]) + "</li>";
    }

    return out + "</ul>";
  });
  Handlebars.registerHelper("xif", function (expression, options) {
    return Handlebars.helpers["x"].apply(this, [expression, options]) ? options.fn(this) : options.inverse(this);
  });
  Handlebars.registerHelper("x", function (expression, options) {
    var fn = function(){}, result;
    // in a try block in case the expression have invalid javascript
    try {
      // create a new function using Function.apply, notice the capital F in Function
      fn = Function.apply(
        this,
        [
          'window', // or add more '_this, window, a, b' you can add more params if you have references for them when you call fn(window, a, b, c);
          'return ' + expression + ';' // edit that if you know what you're doing
        ]
      );
    } catch (e) {
      console.warn('[warning] {{x ' + expression + '}} is invalid javascript', e);
    }
    // then let's execute this new function, and pass it window, like we promised
    // so you can actually use window in your expression
    // i.e expression ==> 'window.config.userLimit + 10 - 5 + 2 - user.count' //
    // or whatever
    try {
      // if you have created the function with more params
      // that would like fn(window, a, b, c)
      result = fn.call(this, window);
    } catch (e) {
      console.warn('[warning] {{x ' + expression + '}} runtime error', e);
    }
    // return the output of that result, or undefined if some error occured
    return result;
  });

  // Set jQuery.validate settings for bootstrap integration
  jQuery.validator.setDefaults({
    highlight: function(element) {
      jQuery(element).closest('.form-group').addClass('has-danger');
    },
    unhighlight: function(element) {
      jQuery(element).closest('.form-group').removeClass('has-danger');
    },
    errorElement: 'span',
    errorClass: 'form-control-feedback',
    errorPlacement: function(error, element) {
      if(element.parent('.input-group').length) {
        error.insertAfter(element.parent());
      } else {
        error.insertAfter(element);
      }
    }
  });
  jQuery.validator.addMethod("slackicon", function(value, element) {
    return (this.optional(element) || (value.startsWith(":") && value.endsWith(":")));
  }, "Must start and end with the character :");